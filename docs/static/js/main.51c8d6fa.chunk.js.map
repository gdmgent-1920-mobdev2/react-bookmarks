{"version":3,"sources":["app/services/firebase/firestore/index.js","app/config/index.js","app/services/firebase/index.js","app/services/ProxyContext.js","app/components/BookmarkList.js","app/components/SEOSearchResult.js","app/components/SEOSearch.js","app/App.js","app/index.js","serviceWorker.js","index.js"],"names":["FirestoreContext","React","createContext","FirestoreProvider","children","useState","bookmarks","setBookmarks","db","useFirebase","app","firestore","getBookmarks","a","query","collection","get","snapshot","docs","map","doc","uid","id","data","useEffect","unsubscribe","onSnapshot","size","forEach","push","console","log","Provider","value","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FirebaseContext","useContext","FirebaseProvider","firebase","apps","length","initializeApp","ProxyContext","ProxyProvider","getSEO","url","fetch","response","jsonData","json","BookmarkList","className","reference","key","title","image","src","SEOSearchResult","searchResult","description","icon","SEOSearch","setUrl","setSearchResult","handleSubmit","ev","preventDefault","result","onSubmit","type","required","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51c8d6fa.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport { useFirebase } from '../..';\r\n\r\nconst FirestoreContext = React.createContext(null);\r\nconst useFirestore = () => useContext(FirestoreContext);\r\n\r\nconst FirestoreProvider = ({children}) => {\r\n    const [bookmarks, setBookmarks] = useState();\r\n    const { app } = useFirebase();\r\n    const db = app.firestore();\r\n\r\n    const getBookmarks = async () => {\r\n        const query = db.collection('bookmarks');\r\n        const snapshot = await query.get();\r\n        const bookmarks = snapshot.docs.map((doc) => {\r\n            return { uid: doc.id, ...doc.data()};\r\n        });\r\n        return bookmarks;\r\n    };\r\n\r\n    const loadRealtimeBookmarks = async () => {\r\n        db.collection(\"bookmarks\").doc(\"SF\")\r\n        .onSnapshot((doc) => {\r\n            console.log(\"Current data: \", doc.data());\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection(\"bookmarks\")\r\n        .onSnapshot((snapshot) => {\r\n            if (snapshot.size) {\r\n                const data = [];\r\n                snapshot.forEach(doc =>\r\n                    data.push({ uid: doc.id, ...doc.data() })\r\n                )\r\n                setBookmarks(data);\r\n            } else {\r\n                console.log('empty');\r\n            }\r\n        });\r\n\r\n        return () => unsubscribe();\r\n    }, []);\r\n \r\n    return (\r\n        <FirestoreContext.Provider value={{bookmarks, getBookmarks}}>\r\n            {children}\r\n        </FirestoreContext.Provider>\r\n    )\r\n};\r\n\r\nexport {\r\n    FirestoreContext,\r\n    FirestoreProvider,\r\n    useFirestore,\r\n}","export const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};","import React, { useContext, useState } from 'react';\r\nimport firebase from 'firebase/app';\r\n\r\nimport { FirestoreContext, FirestoreProvider, useFirestore } from './firestore';\r\nimport { firebaseConfig } from '../../config';\r\n\r\nconst FirebaseContext = React.createContext(null);\r\nconst useFirebase = () => useContext(FirebaseContext);\r\n\r\nconst FirebaseProvider = ({children}) => {\r\n    const [app] = useState(!firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app());\r\n\r\n    return (\r\n        <FirebaseContext.Provider value={{app}}>\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    )\r\n};\r\n\r\nexport {\r\n    FirebaseContext,\r\n    FirebaseProvider,\r\n    FirestoreContext,\r\n    FirestoreProvider,\r\n    useFirebase,\r\n    useFirestore,\r\n}","import React, { createContext, useEffect, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst ProxyContext = createContext();\r\n\r\nconst ProxyProvider = ({children}) => {\r\n     const getSEO = async (url) => {\r\n        const PROXY_NMD_CRAWLER_SEO_URL = 'https://nodejs-nmd-crawler.herokuapp.com/proxy/seo?url=';\r\n        const response = await fetch(`${PROXY_NMD_CRAWLER_SEO_URL}${url}`);\r\n        const jsonData = response.json();\r\n\r\n        return jsonData;\r\n    }\r\n\r\n    return (\r\n        <ProxyContext.Provider value={{getSEO}}>\r\n            {children}\r\n        </ProxyContext.Provider>\r\n    )\r\n};\r\n\r\nexport {\r\n    ProxyContext,\r\n    ProxyProvider,\r\n}","import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport { useFirestore } from '../services';\r\n\r\nimport './BookmarkList.css';\r\n\r\nconst BookmarkList = ({children}) => {\r\n    //const [bookmarks, setBookmarks] = useState(null);\r\n    const { bookmarks, getBookmarks } = useFirestore();\r\n\r\n    /*useEffect(() => {        \r\n        const fetchBookmarks = async () => {\r\n            const bm = await getBookmarks();\r\n            setBookmarks(bm);\r\n        }\r\n        fetchBookmarks();\r\n    }, []);*/\r\n\r\n    return (\r\n        <div className=\"bookmark-list\">\r\n            {\r\n                !!bookmarks\r\n                    ? <ul className=\"bookmark-list__ul\">\r\n                        { bookmarks.map((reference) => {\r\n                            return (<div className=\"bookmark-list__item\" key={reference.uid}>\r\n                                <h1 className=\"title\">{reference.title}</h1>\r\n                                {reference.image ? <picture className=\"picture\"><img src={reference.image} /></picture> : <Fragment></Fragment>}\r\n                            </div>)\r\n                        })}\r\n                      </ul> \r\n                    : <Fragment>LOADINGS</Fragment>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookmarkList;","import React, { Fragment } from 'react';\r\n\r\nimport './SEOSearchResult.css';\r\n\r\nconst SEOSearchResult = ({children, searchResult}) => {\r\n\r\n    return (\r\n        <div className=\"seo-search-result\">\r\n            {!!searchResult\r\n                ? <div>\r\n                    <header className=\"seo-search-result__header\">\r\n                        <h1 className=\"seo-search-result__title\">{searchResult.title}</h1>\r\n                        <h2 className=\"seo-search-result__description\">{searchResult.description}</h2>\r\n                    </header>                    \r\n                    <picture className=\"seo-search-result__picture\">\r\n                        <img src={searchResult.icon} />\r\n                    </picture>\r\n                  </div>\r\n                : <Fragment></Fragment>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SEOSearchResult;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { ProxyContext, useFirestore } from '../services';\r\n\r\nimport SEOSearchResult from './SEOSearchResult';\r\n\r\nimport './SEOSearch.css';\r\n\r\nconst SEOSearch = ({}) => {\r\n    const [ url, setUrl ] = useState('');\r\n    const [ searchResult, setSearchResult ] = useState('');\r\n\r\n    const { getSEO } = useContext(ProxyContext);\r\n\r\n    const handleSubmit = async (ev) => {\r\n        ev.preventDefault();\r\n        const result = await getSEO(url);\r\n        setSearchResult(result);\r\n    };\r\n\r\n    return (\r\n        <div className=\"seo-search\">\r\n            <form className=\"url-form\" onSubmit={handleSubmit}>\r\n                <input type=\"text\" required placeholder=\"write your url...\" onChange={(ev) => setUrl(ev.target.value)} value={url} />\r\n                <input type=\"submit\" value=\"Get SEO\" />\r\n            </form>\r\n            <SEOSearchResult searchResult={searchResult} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SEOSearch;","import React from 'react';\r\n\r\nimport { FirebaseProvider, ProxyProvider, FirestoreProvider } from './services';\r\nimport { BookmarkList, SEOSearch } from './components';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <FirebaseProvider>\r\n        <FirestoreProvider>\r\n          <ProxyProvider>\r\n            <BookmarkList />\r\n            <SEOSearch></SEOSearch>\r\n          </ProxyProvider>\r\n        </FirestoreProvider>\r\n      </FirebaseProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}